#DFS

#스택 자료구조를 이용함. 
# 1 탐색 시작 노드를 스택에 삽입하고 방문처리를함
# 2 스택의 최상단 노드에 방문하지 않은 인접 노드가 하나라도 있으면 그 도드를 스택에 넣고 
# 방문처리 하여 방문 안한 인접 노드가 없으면 스택에서 최상단 노드를 꺼냄
# 3 더이상 2의 과정을 하지 못할때까지 반복 


# 방법 1) 옆에 인접한 값들을 2차원 리스트로 표현하는 방법

def dfs(graph,v,visited):
    visited[v]=True
    print(v,end=' ')
    for i in graph[v]:
        if not visited[i]:
            dfs(graph,i,visited)


graph=[
    [],
    [2,3,8],
    [1,7],
    [1,4,5],
    [3,5],
    [3,4],
    [7],
    [2,6,8],
    [1,7]
]

visited=[False]*9

dfs(graph,1,visited)





# 큐
from collections import deque

queue=deque()

queue.append(5)
queue.append(2)
queue.append(3)
queue.append(7)
queue.popleft()
queue.append(1)
queue.append(4)
queue.popleft()

print(queue)

#이것을 pop(0)하면 더 느리게 동작 




#BFS 너비 우선 탐색

#가까운 노드부터 우선적으로 탐색하는 알고리즘
# 큐 자료구조를 이용

# 1. 탐색 시작 노드를 큐에 삽입하고 방문 처리
# 2. 큐에서 노드를 꺼낸뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 
#삽입하고 방문 처리를 한다.
# 3. 더 이상 2번의 과정을 수행할 수 없을때까지 반복

from collections import deque

def bfs(graph,start,visited):
    queue=deque([start])
    visited[start]=True
    
    while queue:
        v=queue.popleft()
        print(v, end=' ')
        
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i]=True

graph=[
    [],
    [2,3,8],
    [1,7],
    [1,4,5],
    [3,5],
    [3,4],
    [7],
    [2,6,8],
    [1,7]
]

visited=[False]*9
bfs(graph,1,visited)


